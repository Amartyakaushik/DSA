// SORTING
// QUICK

#include<iostream>
using namespace std;

void swap(int arr[], int i, int j){
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}

int partition(int arr[], int l, int r){
    int pivot = arr[r];
    int i = l -1;
    for(int j = l; j < r; j++){
        if(arr[j] < pivot){
            i++;
            swap(arr, i, j);
        }
    }

    swap(arr, i + 1, r);
    return i + 1;
}

void quickSort(int arr[], int l, int r){
    if(l < r){
        int pivot = partition(arr, l, r);
        quickSort(arr, l, pivot-1);
        quickSort(arr, pivot+1, r);        
    }
}

int main(){
    int arr[] = {5, 2, 9, 1, 7, 3, 6};
    int n = sizeof(arr)/sizeof(int);
    quickSort(arr, 0, n-1);

    for(int i = 0; i < n; i++){
        cout<<arr[i]<<" ";
    }cout<<endl;
}

// MERGE SORT
#include<iostream>
using  namespace std;
void mergeSort(int[] arr, int left, int right){   
    if (left < right) {
        return;
    }
    int mid = (left + right) / 2;
    mergeSort(arr, left, mid);
    mergeSort(arr,right, mid);
    merge(arr,left,mid,right);
}
void merge(int arr[], int left, int mid, int right){
    int n1 = mid - left + 1;
    int n2 = right - mid;
    int L[n1], R[n2];
    for(int i = 0; i< n1; i++ ){
        L[i] = arr[left +1];
    }
    for(int j = 0; j<n2; j++){
        R[j] = arr[mid + 1 + j];
    }

    int i = 0, j = 0, k = left;
    while(i < n1 && j < n2){
        if(L[i] <= R[j]){
            arr[k++] = L[i++];
        }else{
            arr[k++] = R[j++];
        }
    }

    while(i < n1){
        arr[k++] = L[i++];
    }
    
    while(j < n2){
        arr[k++] = L[j++];
    }

}
// void merge(int)

void display(int arr[] , int size){
    for(int i = 0; i < size; i++){
        cout << arr[i] <<" ";
    }cout<<endl;
}

int main(){
    int arr = [1,3,54,22,4,12,111];
    int size = sizeof(arr)/sizeof(arr[0]);
    display(arr,size);
    // mergeSort(arr, size);
}

//Inversion count

// SELECTION
#include<iostream>
using namespace std;

// int findMin_indx(int arr[], int size){
//     int minValue = arr[0];
//     int min_indx = 0;
//     for(int i = 1; i< size ; i++){
//         if(minValue > arr[i]){
//             minValue = arr[i];
//             min_indx = i;
//         }
//     }
//     return min_indx;
// }

void swap(int &num1, int &num2){
    int temp = num1;
    num1 = num2;
    num2 = temp;
}
// void selectionSort(int arr[], int min_indx, int size){
void selectionSort(int arr[], int size){
    for(int i = 0; i<size - 1; i++){
        int min_indx = i;
        for(int j = i +1; j < size; j++){
            if(arr[j] < arr[min_indx]){
                min_indx = j;
            }
        }
        swap(arr[i], arr[min_indx]);
    }
}

int main(){
    int arr[] = {14,12,3,4,233,5,23};
    int size = sizeof(arr) / sizeof(arr[0]);
    // int min_indx = findMin_indx(arr, size);
    // cout<<min_indx<<endl;
    selectionSort(arr, size);
    // selectionSort(arr, min_indx, size);
    for(int i = 0; i<size; i++){
        cout<<(arr[i]);
        cout<<" ";
        }
    cout<<endl;
}

//             BUBBLE 
#include<iostream>
using namespace std;
void bubbleSort(int arr[], int size){
	int i,j;
	for(i = 0; i<size-1; i++){
		for(j =0; j<size-i-1; j++){
			if(arr[j]>arr[j+1]){
				int temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}	
	}
	
	for(int a=0; a<size; a++){
		cout<<arr[a]<<" ";
	}
	cout<<endl;
}

int main(){
	int arr[] = {12,2,23,5,122,2222,3,7};
	int size = sizeof(arr) / sizeof(arr[0]);
	bubbleSort(arr,size);
}